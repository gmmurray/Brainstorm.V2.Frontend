@page "/templates"
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<PageTitle>templates</PageTitle>

<div>
  <h1 class="display-1">templates</h1>
  <p class="fs-6 text-muted">@(templates.Count() + " template(s)")</p>
  <div class="row g-4">
    <div class="col-12 col-md-auto">
      <a class="btn btn-primary" href="templates/create">new template</a>
    </div>
    <div class="col">
      <div class="input-group">
        <input type="text" placeholder="search..." class="form-control" @oninput="HandleSearch" /><button
          class="btn btn-outline-primary" type="button" @onclick="HandleSearchReset">
          clear
        </button>
      </div>
    </div>
  </div>
  @if (loading)
  {
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
      <CardPlaceholders Count="6" />
    </div>
  }
  else if (!templates.Any())
  {
    <div>
      <h4 class="display-4 text-muted text-center mt-5">no templates yet</h4>
    </div>
  }
  else
  {
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
      @foreach (var item in visibleTemplates)
      {
        <div class="col">
          <div class="card h-100">
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">@item.Name</h5>
              <h6 class="card-subtitle mb-2 text-muted mt-auto">@(item.Fields.Count() + " field(s)")</h6>
            </div>
            <div class="card-footer">
              <a href="templates/view/@item.Id" class="btn btn-link">view</a>
              <button @onclick="() => HandleDelete(item)" class="btn btn-link text-danger"
            disabled="@deleting">delete</button>
            </div>
          </div>
        </div>
      }
    </div>
  }
</div>

@code {
  private IEnumerable<Template> templates = Enumerable.Empty<Template>();
  private IEnumerable<Template> visibleTemplates = Enumerable.Empty<Template>();
  private bool loading = true;
  private bool deleting = false;

  protected override async Task OnInitializedAsync()
  {
    await RetrieveTemplates();
  }

  private async Task RetrieveTemplates()
  {
    loading = true;
    try
    {
      var client = ClientFactory.CreateClient("WebAPI");
      templates = (await client.GetFromJsonAsync<IEnumerable<Template>>("templates")) ?? Enumerable.Empty<Template>();
      visibleTemplates = templates.ToList();
    }
    catch (Exception exception)
    {
      if (exception is AccessTokenNotAvailableException)
      {
        ((AccessTokenNotAvailableException)exception).Redirect();
      }
    }
    loading = false;
  }

  private void HandleSearch(ChangeEventArgs args)
  {
    var result = (templates ?? Enumerable.Empty<Template>()).ToList();
    var value = args.Value?.ToString() ?? "";

    if (!string.IsNullOrEmpty(value))
    {
      result = result
      .Where(x => (x.Name ?? "").ToLower().Contains(value.ToLower()))
      .ToList();
    }

    visibleTemplates = result.ToList();
  }

  private void HandleSearchReset()
  {
    visibleTemplates = templates.ToList();
  }

  private async Task HandleDelete(Template template)
  {
    deleting = true;
    try
    {
      var client = ClientFactory.CreateClient("WebAPI");
      var response = await client.DeleteAsync($"templates/{template.Id}");
      if (response.IsSuccessStatusCode)
      {
        await RetrieveTemplates();
      }
    }
    catch (Exception exception)
    {
      if (exception is AccessTokenNotAvailableException)
      {
        ((AccessTokenNotAvailableException)exception).Redirect();
      }
    }
    deleting = false;
  }
}