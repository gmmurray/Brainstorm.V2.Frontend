@page "/ideas"
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<PageTitle>Ideas</PageTitle>
<div>
  <h1 class="display-1">ideas</h1>
  <p class="fs-6 text-muted">@(ideas.Count() + " idea(s)")</p>
  <div class="row g-4">
    <div class="col-12 col-md-auto">
      <a class="btn btn-primary" href="ideas/create">new idea</a>
    </div>
    <div class="col">
      <div class="input-group">
        <input type="text" placeholder="search..." class="form-control" @oninput="HandleSearch" /><button
          class="btn btn-outline-primary" type="button" @onclick="HandleSearchReset">
          clear
        </button>
      </div>
    </div>
  </div>
  @if (loading)
  {
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
      <CardPlaceholders Count="6" />
    </div>
  }
  else if (!ideas.Any())
  {
    <div>
      <h4 class="display-4 text-muted text-center mt-5">no ideas yet</h4>
    </div>
  }
  else
  {
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
      @foreach (var item in visibleIdeas)
      {
        <div class="col">
          <div class="card h-100">
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">@item.Name</h5>
              <h6 class="card-subtitle mb-2 text-muted mt-auto">@(item.Template?.Name ?? "no template")</h6>
            </div>
            <div class="card-footer">
              <a href="ideas/view?ideaId=@(item.Id)" class="card-link">view</a>
            </div>
          </div>
        </div>
      }
    </div>
  }

</div>

@code {
  private IEnumerable<Idea> ideas = Enumerable.Empty<Idea>();
  private IEnumerable<Idea> visibleIdeas = Enumerable.Empty<Idea>();
  private bool loading = true;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var client = ClientFactory.CreateClient("WebAPI");
      ideas = (await client.GetFromJsonAsync<IEnumerable<Idea>>("ideas")) ?? Enumerable.Empty<Idea>();
      visibleIdeas = ideas.ToList();
    }
    catch (Exception exception)
    {
      if (exception is AccessTokenNotAvailableException)
      {
        ((AccessTokenNotAvailableException)exception).Redirect();
      }
    }
    loading = false;
  }

  private void HandleSearch(ChangeEventArgs args)
  {
    var result = (ideas ?? Enumerable.Empty<Idea>()).ToList();
    var value = args.Value?.ToString() ?? "";

    if (!string.IsNullOrEmpty(value))
    {
      result = result
      .Where(x => (x.Name ?? "").ToLower().Contains(value.ToLower()))
      .ToList();
    }

    visibleIdeas = result.ToList();
  }

  private void HandleSearchReset()
  {
    visibleIdeas = ideas.ToList();
  }
}